name: 'AWS Serverless Deployment Pipeline'

on:
  push:
    branches:
    - main
    - api_gateway_integration
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # # Build/Zip All Lambda Deployables
    # - name: Zip Lambda Deployables
    #   run: |
    #     chmod +x ${GITHUB_WORKSPACE}/.github/workflows/zip_lambda_deployables.sh
    #     ${GITHUB_WORKSPACE}/.github/workflows/zip_lambda_deployables.sh
    
    - name: Update Terraform Template
      run: |
        chmod +x ${GITHUB_WORKSPACE}/.github/workflows/prepare_terraform.sh
        ${GITHUB_WORKSPACE}/.github/workflows/prepare_terraform.sh

    # Deployment Phase
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.14.9
    
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan
    
      # On push to main, build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve
      
    # Cleanup Phase
    - name: Cleanup AWS Credentials
      run: |
        rm -rf .aws
